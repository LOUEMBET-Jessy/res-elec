from marshmallow import Schema, fields, validate

class UserSchema(Schema):
    id = fields.Int(dump_only=True)
    email = fields.Email(required=True)
    prenom = fields.Str(required=True)
    nom = fields.Str(required=True)
    phone_number = fields.Str(required=True)
    password = fields.Str(required=True, load_only=True)
    role = fields.Str(validate=validate.OneOf(['super_admin', 'agent_ministere', 'agent_election', 'president_bureau', 'operateur_donnees', 'validateur_candidats']), required=True)
    est_actif = fields.Bool(default=True)
    derniere_connexion = fields.DateTime(dump_only=True)
    date_creation = fields.DateTime(dump_only=True)
    date_modification = fields.DateTime(dump_only=True)

class SessionSchema(Schema):
    id = fields.Int(dump_only=True)
    utilisateur_id = fields.Int(required=True)
    jeton = fields.Str(required=True)
    expiration = fields.DateTime(required=True)
    agent_utilisateur = fields.Str()
    adresse_ip = fields.Str()
    date_creation = fields.DateTime(dump_only=True)

class ElectionSchema(Schema):
    id = fields.Int(dump_only=True)
    nom = fields.Str(required=True)
    description = fields.Str()
    date_debut = fields.DateTime(required=True)
    date_fin = fields.DateTime(required=True)
    statut = fields.Str(validate=validate.OneOf(['brouillon', 'a_venir', 'en_cours', 'terminee', 'annulee']), required=True)
    type = fields.Str(validate=validate.OneOf(['presidentielle', 'legislative', 'municipale', 'regionale']), required=True)
    cree_par = fields.Int(required=True)
    date_creation = fields.DateTime(dump_only=True)
    date_modification = fields.DateTime(dump_only=True)

class ResultatElectionSchema(Schema):
    id = fields.Int(dump_only=True)
    election_id = fields.Int(required=True)
    bureau_vote_id = fields.Int(required=True)
    electeurs_inscrits = fields.Int(required=True)
    total_votes = fields.Int(required=True)
    votes_valides = fields.Int(required=True)
    votes_invalides = fields.Int(required=True)
    votes_blancs = fields.Int(required=True)
    resultats_candidats = fields.List(fields.Dict(), required=True)
    soumis_par = fields.Int(required=True)
    date_soumission = fields.DateTime(required=True)
    statut = fields.Str(validate=validate.OneOf(['brouillon', 'soumis', 'valide', 'rejete']), required=True)
    remarques = fields.Str()
    date_creation = fields.DateTime(dump_only=True)
    date_modification = fields.DateTime(dump_only=True)

class CandidatSchema(Schema):
    id = fields.Int(dump_only=True)
    prenom = fields.Str(required=True)
    nom = fields.Str(required=True)
    parti = fields.Str(required=True)
    logo_parti = fields.Str()
    photo = fields.Str()
    biographie = fields.Str()
    election_id = fields.Int(required=True)
    statut = fields.Str(validate=validate.OneOf(['en_attente', 'approuve', 'rejete']), required=True)
    cree_par = fields.Int(required=True)
    date_creation = fields.DateTime(dump_only=True)
    date_modification = fields.DateTime(dump_only=True)

class BureauDeVoteSchema(Schema):
    id = fields.Int(dump_only=True)
    nom = fields.Str(required=True)
    adresse = fields.Str(required=True)
    region = fields.Str(required=True)
    departement = fields.Str(required=True)
    commune = fields.Str(required=True)
    localisation = fields.Dict(required=True)
    electeurs_inscrits = fields.Int(required=True)
    personne_contact = fields.Str()
    telephone_contact = fields.Str()
    est_actif = fields.Bool(default=True)
    date_creation = fields.DateTime(dump_only=True)
    date_modification = fields.DateTime(dump_only=True)

class JournalAuditSchema(Schema):
    id = fields.Int(dump_only=True)
    action = fields.Str(required=True)
    utilisateur_id = fields.Int(required=True)
    agent_utilisateur = fields.Str()
    adresse_ip = fields.Str()
    metadonnees = fields.Dict()
    date_creation = fields.DateTime(dump_only=True)
